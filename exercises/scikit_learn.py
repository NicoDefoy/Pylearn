exercises = [
    {
        "id": "sklearn_intro",
        "title": "üìò Introduction √† scikit-learn",
        "instruction": "Scikit-learn est une biblioth√®que pour le machine learning. On l'importe avec :\n\nfrom sklearn.linear_model import LinearRegression",
        "initial_code": "from sklearn.linear_model import LinearRegression\nprint('sklearn pr√™t !')",
        "expected_output": "sklearn pr√™t !",
        "level": 0,
        "theme": "scikit_learn",
        "hint": "Commence toujours par importer la classe ou le module dont tu as besoin.",
        "solution_code": "from sklearn.linear_model import LinearRegression\nprint('sklearn pr√™t !')"
    },
    {
        "id": "sklearn_model_create",
        "title": "Cr√©er un mod√®le",
        "instruction": "Cr√©e une instance de LinearRegression.",
        "initial_code": "# Cr√©e un mod√®le",
        "expected_output": "",
        "level": 1,
        "theme": "scikit_learn",
        "hint": "Instancie la classe LinearRegression().",
        "solution_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()"
    },
    {
        "id": "sklearn_fit_model",
        "title": "üìò Entra√Æner un mod√®le",
        "instruction": "On entra√Æne un mod√®le avec .fit(X, y). X = donn√©es d'entr√©e, y = cibles.\n\nmodel.fit(X, y)",
        "initial_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nX = [[1], [2], [3]]\ny = [2, 4, 6]\nmodel.fit(X, y)",
        "expected_output": "",
        "level": 2,
        "theme": "scikit_learn",
        "hint": "Utilise la m√©thode fit(X, y) sur ton mod√®le.",
        "solution_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nX = [[1], [2], [3]]\ny = [2, 4, 6]\nmodel.fit(X, y)"
    },
    {
        "id": "sklearn_predict",
        "title": "Pr√©diction simple",
        "instruction": "Pr√©dit la valeur de y quand X = 4, en utilisant un mod√®le d√©j√† entra√Æn√©.",
        "initial_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit([[1], [2], [3]], [2, 4, 6])\nprint(model.predict([[4]]))",
        "expected_output": "[8.]",
        "level": 2,
        "theme": "scikit_learn",
        "hint": "Utilise la m√©thode predict([[4]]) sur le mod√®le entra√Æn√©.",
        "solution_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit([[1], [2], [3]], [2, 4, 6])\nprint(model.predict([[4]]))"
    },
    {
        "id": "sklearn_accuracy",
        "title": "üîÅ Bonus : Pr√©cision d'un mod√®le",
        "instruction": "Utilise .score(X, y) pour afficher la pr√©cision du mod√®le.",
        "initial_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nX = [[1], [2], [3]]\ny = [2, 4, 6]\nmodel.fit(X, y)\nprint(model.score(X, y))",
        "expected_output": "1.0",
        "level": 3,
        "theme": "scikit_learn",
        "hint": "Utilise la m√©thode score(X, y) sur le mod√®le.",
        "solution_code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nX = [[1], [2], [3]]\ny = [2, 4, 6]\nmodel.fit(X, y)\nprint(model.score(X, y))"
    },
    {
        "id": "sklearn_dataset",
        "title": "üìò Charger un dataset",
        "instruction": "Scikit-learn propose des jeux de donn√©es. Exemple :\n\nfrom sklearn.datasets import load_iris\ndata = load_iris()",
        "initial_code": "from sklearn.datasets import load_iris\ndata = load_iris()\nprint(data.feature_names)",
        "expected_output": "['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']",
        "level": 3,
        "theme": "scikit_learn",
        "hint": "Lis bien l'exemple et observe l'utilisation de load_iris().",
        "solution_code": "from sklearn.datasets import load_iris\ndata = load_iris()\nprint(data.feature_names)"
    },
    {
        "id": "sklearn_split",
        "title": "üîÅ Bonus : Diviser les donn√©es",
        "instruction": "Utilise train_test_split pour s√©parer donn√©es d'entra√Ænement/test.",
        "initial_code": "from sklearn.model_selection import train_test_split\nX = [[1], [2], [3], [4]]\ny = [2, 4, 6, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5)\nprint(len(X_train))",
        "expected_output": "2",
        "level": 4,
        "theme": "scikit_learn",
        "hint": "Utilise train_test_split(X, y, test_size=...) pour diviser les donn√©es.",
        "solution_code": "from sklearn.model_selection import train_test_split\nX = [[1], [2], [3], [4]]\ny = [2, 4, 6, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5)\nprint(len(X_train))"
    }
]

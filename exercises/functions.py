exercises = [
    {
        "id": "func_intro",
        "title": "üìò Introduction aux fonctions",
        "instruction": "Une fonction est un bloc de code r√©utilisable. On la cr√©e avec 'def nom():', puis on l'appelle avec 'nom()'.",
        "initial_code": "def hello():\n    print('Hello!')\n\nhello()",
        "expected_output": "Hello!",
        "level": 0,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe la structure d'une fonction en Python.",
        "solution_code": "def hello():\n    print('Hello!')\n\nhello()"
    },
    {
        "id": "func_1",
        "title": "D√©finir une fonction bonjour",
        "instruction": "D√©finis une fonction bonjour() qui affiche 'Salut !'. Appelle-la ensuite.",
        "initial_code": "# √âcris ton code ici",
        "expected_output": "Salut !",
        "level": 1,
        "theme": "functions",
        "hint": "Utilise def pour cr√©er la fonction, puis appelle-la en dessous.",
        "solution_code": "def bonjour():\n    print('Salut !')\n\nbonjour()"
    },
    {
        "id": "func_2",
        "title": "Encore une fonction simple",
        "instruction": "Cr√©e une fonction coucou() qui affiche 'Hey !'. Appelle-la ensuite.",
        "initial_code": "# √âcris ton code ici",
        "expected_output": "Hey !",
        "level": 1,
        "theme": "functions",
        "hint": "D√©finis la fonction avec def, puis appelle-la.",
        "solution_code": "def coucou():\n    print('Hey !')\n\ncoucou()"
    },
    {
        "id": "func_3",
        "title": "Afficher une autre phrase",
        "instruction": "Cr√©e une fonction test() qui affiche 'Je progresse !'. Appelle-la ensuite.",
        "initial_code": "# Tape ta solution ici",
        "expected_output": "Je progresse !",
        "level": 1,
        "theme": "functions",
        "hint": "M√™me principe : cr√©e la fonction puis appelle-la.",
        "solution_code": "def test():\n    print('Je progresse !')\n\ntest()"
    },
    {
        "id": "func_param_example",
        "title": "üìò Exemple : Fonction avec param√®tre",
        "instruction": "Voici une fonction qui prend un param√®tre :\n\ndef dire_bonjour(nom):\n    print('Salut', nom)\n\ndire_bonjour('Emma')",
        "initial_code": "def dire_bonjour(nom):\n    print('Salut', nom)\n\ndire_bonjour('Emma')",
        "expected_output": "Salut Emma",
        "level": 2,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe comment le param√®tre est utilis√© dans la fonction.",
        "solution_code": "def dire_bonjour(nom):\n    print('Salut', nom)\n\ndire_bonjour('Emma')"
    },
    {
        "id": "func_4",
        "title": "Fonction avec un param√®tre",
        "instruction": "Cr√©e une fonction hello(nom) qui affiche 'Hello' suivi du nom donn√©. Appelle-la avec ton pr√©nom.",
        "initial_code": "# √âcris la fonction ici",
        "expected_output": "Hello Nico",
        "level": 2,
        "theme": "functions",
        "hint": "D√©clare la fonction avec un param√®tre et utilise print() pour afficher le message.",
        "solution_code": "def hello(nom):\n    print('Hello', nom)\n\nhello('Nico')"
    },
    {
        "id": "func_5",
        "title": "Message personnalis√©",
        "instruction": "Cr√©e une fonction bienvenue(prenom) qui affiche 'Bienvenue ' + prenom. Appelle-la avec Paul.",
        "initial_code": "# √Ä toi de jouer !",
        "expected_output": "Bienvenue Paul",
        "level": 2,
        "theme": "functions",
        "hint": "Utilise la concat√©nation ou une f-string pour afficher le message.",
        "solution_code": "def bienvenue(prenom):\n    print(f'Bienvenue {prenom}')\n\nbienvenue('Paul')"
    },
    {
        "id": "func_6",
        "title": "Utiliser un param√®tre dans une phrase",
        "instruction": "Cr√©e une fonction presentation(prenom) qui affiche 'Je m'appelle pr√©nom'. Appelle-la avec Alex.",
        "initial_code": "# Pr√©sente-toi",
        "expected_output": "Je m'appelle Alex",
        "level": 2,
        "theme": "functions",
        "hint": "Utilise une f-string pour ins√©rer le pr√©nom dans la phrase.",
        "solution_code": "def presentation(prenom):\n    print(f'Je m\'appelle {prenom}')\n\npresentation('Alex')"
    },
    {
        "id": "func_return_example",
        "title": "üìò Exemple : Fonction avec return",
        "instruction": "Voici une fonction qui retourne une valeur :\n\ndef carre(x):\n    return x * x\n\nprint(carre(3))",
        "initial_code": "def carre(x):\n    return x * x\n\nprint(carre(3))",
        "expected_output": "9",
        "level": 3,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe l'utilisation du mot-cl√© return.",
        "solution_code": "def carre(x):\n    return x * x\n\nprint(carre(3))"
    },
    {
        "id": "func_7",
        "title": "Fonction qui retourne un double",
        "instruction": "Cr√©e une fonction double(x) qui retourne x*2. Affiche le r√©sultat de double(5).",
        "initial_code": "# Fonction double",
        "expected_output": "10",
        "level": 3,
        "theme": "functions",
        "hint": "Utilise return pour renvoyer le r√©sultat de x*2.",
        "solution_code": "def double(x):\n    return x * 2\n\nprint(double(5))"
    },
    {
        "id": "func_8",
        "title": "Addition de deux nombres",
        "instruction": "Cr√©e une fonction addition(a, b) qui retourne leur somme. Appelle-la avec 2 et 4.",
        "initial_code": "# Addition",
        "expected_output": "6",
        "level": 3,
        "theme": "functions",
        "hint": "D√©clare deux param√®tres et retourne leur somme.",
        "solution_code": "def addition(a, b):\n    return a + b\n\nprint(addition(2, 4))"
    },
    {
        "id": "func_9",
        "title": "Retourner une phrase",
        "instruction": "Cr√©e une fonction salutation(nom) qui retourne 'Bonjour nom !'. Affiche salutation('Lucas').",
        "initial_code": "# Teste avec un nom",
        "expected_output": "Bonjour Lucas !",
        "level": 3,
        "theme": "functions",
        "hint": "Utilise return pour renvoyer la phrase compl√®te.",
        "solution_code": "def salutation(nom):\n    return f'Bonjour {nom} !'\n\nprint(salutation('Lucas'))"
    },
    {
        "id": "func_default_example",
        "title": "üìò Exemple : Param√®tre avec valeur par d√©faut",
        "instruction": "On peut donner une valeur par d√©faut √† un param√®tre. Cela permet d'appeler la fonction sans toujours fournir l'argument.\n\ndef hello(nom='ami'):\n    print('Salut', nom)\n\nhello()\nhello('Bob')",
        "initial_code": "def hello(nom='ami'):\n    print('Salut', nom)\n\nhello()\nhello('Bob')",
        "expected_output": "Salut ami\nSalut Bob",
        "level": 4,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe la valeur par d√©faut du param√®tre.",
        "solution_code": "def hello(nom='ami'):\n    print('Salut', nom)\n\nhello()\nhello('Bob')"
    },
    {
        "id": "func_10",
        "title": "Utiliser un param√®tre par d√©faut",
        "instruction": "Cr√©e une fonction salut(nom='toi') qui affiche 'Salut nom'. Appelle-la sans argument puis avec 'L√©o'.",
        "initial_code": "# √Ä toi !",
        "expected_output": "Salut toi\nSalut L√©o",
        "level": 4,
        "theme": "functions",
        "hint": "D√©clare le param√®tre avec une valeur par d√©faut et affiche le message.",
        "solution_code": "def salut(nom='toi'):\n    print(f'Salut {nom}')\n\nsalut()\nsalut('L√©o')"
    },
    {
        "id": "func_multi_return_example",
        "title": "üìò Exemple : Retourner plusieurs valeurs",
        "instruction": "Une fonction peut retourner plusieurs valeurs avec return, s√©par√©es par des virgules.\n\ndef stats(a, b):\n    return a + b, a * b\n\nsomme, produit = stats(3, 4)\nprint(somme, produit)",
        "initial_code": "def stats(a, b):\n    return a + b, a * b\n\nsomme, produit = stats(3, 4)\nprint(somme, produit)",
        "expected_output": "7 12",
        "level": 4,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe le retour de plusieurs valeurs.",
        "solution_code": "def stats(a, b):\n    return a + b, a * b\n\nsomme, produit = stats(3, 4)\nprint(somme, produit)"
    },
    {
        "id": "func_11",
        "title": "Retourner deux r√©sultats",
        "instruction": "Cr√©e une fonction info(nombre) qui retourne (nombre + 1, nombre - 1). Affiche les deux r√©sultats pour 5.",
        "initial_code": "# Let's go",
        "expected_output": "6 4",
        "level": 4,
        "theme": "functions",
        "hint": "Retourne un tuple avec (nombre + 1, nombre - 1).",
        "solution_code": "def info(nombre):\n    return nombre + 1, nombre - 1\n\na, b = info(5)\nprint(a, b)"
    },
    {
        "id": "func_list_param_example",
        "title": "üìò Exemple : Param√®tre de type liste",
        "instruction": "On peut passer une liste en param√®tre. Exemple :\n\ndef moyenne(notes):\n    return sum(notes) / len(notes)\n\nprint(moyenne([10, 12, 14]))",
        "initial_code": "def moyenne(notes):\n    return sum(notes) / len(notes)\n\nprint(moyenne([10, 12, 14]))",
        "expected_output": "12.0",
        "level": 4,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe comment la liste est utilis√©e.",
        "solution_code": "def moyenne(notes):\n    return sum(notes) / len(notes)\n\nprint(moyenne([10, 12, 14]))"
    },
    {
        "id": "func_12",
        "title": "Calculer une moyenne",
        "instruction": "Cr√©e une fonction moyenne(liste) qui retourne la moyenne des valeurs. Teste-la sur [10, 12, 14].",
        "initial_code": "# Moyenne d'une liste",
        "expected_output": "12.0",
        "level": 4,
        "theme": "functions",
        "hint": "Utilise sum() et len() pour calculer la moyenne.",
        "solution_code": "def moyenne(liste):\n    return sum(liste) / len(liste)\n\nprint(moyenne([10, 12, 14]))"
    },
    {
        "id": "func_recursive_example",
        "title": "üìò Exemple : Fonction r√©cursive",
        "instruction": "Une fonction r√©cursive s'appelle elle-m√™me. Exemple :\n\ndef fact(n):\n    if n <= 1:\n        return 1\n    return n * fact(n - 1)\n\nprint(fact(4))",
        "initial_code": "def fact(n):\n    if n <= 1:\n        return 1\n    return n * fact(n - 1)\n\nprint(fact(4))",
        "expected_output": "24",
        "level": 5,
        "theme": "functions",
        "hint": "Lis bien l'exemple et observe l'appel r√©cursif.",
        "solution_code": "def fact(n):\n    if n <= 1:\n        return 1\n    return n * fact(n - 1)\n\nprint(fact(4))"
    },
    {
        "id": "func_13",
        "title": "Cr√©er une fonction factorielle r√©cursive",
        "instruction": "Cr√©e une fonction factorielle(n) qui retourne la factorielle de n. Teste-la avec n = 4.",
        "initial_code": "# Fonction r√©cursive",
        "expected_output": "24",
        "level": 5,
        "theme": "functions",
        "hint": "Appelle la fonction elle-m√™me pour n > 1, sinon retourne 1.",
        "solution_code": "def factorielle(n):\n    if n <= 1:\n        return 1\n    return n * factorielle(n - 1)\n\nprint(factorielle(4))"
    }
]

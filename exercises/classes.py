exercises = [
    {
        "id": "class_intro",
        "title": "üìò Introduction aux classes",
        "instruction": "Une classe permet de regrouper des donn√©es et des fonctions. Exemple :\n\nclass Chien:\n    def aboyer(self):\n        print('Wouf')\n\nrex = Chien()\nrex.aboyer()",
        "initial_code": "class Chien:\n    def aboyer(self):\n        print('Wouf')\n\nrex = Chien()\nrex.aboyer()",
        "expected_output": "Wouf",
        "level": 0,
        "theme": "classes",
        "hint": "Lis bien l'exemple et observe la structure d'une classe et d'une m√©thode.",
        "solution_code": "class Chien:\n    def aboyer(self):\n        print('Wouf')\n\nrex = Chien()\nrex.aboyer()"
    },
    {
        "id": "class_basic",
        "title": "Cr√©er une classe simple",
        "instruction": "Cr√©e une classe `Animal` vide (avec pass), puis cr√©e une instance.",
        "initial_code": "# Classe Animal ici",
        "expected_output": "",
        "level": 1,
        "theme": "classes",
        "hint": "Utilise le mot-cl√© class et le mot-cl√© pass pour une classe vide.",
        "solution_code": "class Animal:\n    pass\n\na = Animal()"
    },
    {
        "id": "class_attribute",
        "title": "üìò Attributs d'instance",
        "instruction": "On initialise les attributs avec `__init__`. Exemple :\n\nclass Person:\n    def __init__(self, name):\n        self.name = name",
        "initial_code": "class Person:\n    def __init__(self, name):\n        self.name = name\n\np = Person('Nico')\nprint(p.name)",
        "expected_output": "Nico",
        "level": 2,
        "theme": "classes",
        "hint": "Lis bien l'exemple et observe l'utilisation de __init__ pour les attributs.",
        "solution_code": "class Person:\n    def __init__(self, name):\n        self.name = name\n\np = Person('Nico')\nprint(p.name)"
    },
    {
        "id": "class_init_create",
        "title": "Initialiser une classe avec attribut",
        "instruction": "Cr√©e une classe `Chien` avec un attribut `nom`, pass√© au moment de la cr√©ation. Affiche le nom.",
        "initial_code": "# Classe avec __init__",
        "expected_output": "Rex",
        "level": 2,
        "theme": "classes",
        "hint": "Ajoute un __init__ qui prend nom en param√®tre et l'affecte √† self.nom.",
        "solution_code": "class Chien:\n    def __init__(self, nom):\n        self.nom = nom\n\nrex = Chien('Rex')\nprint(rex.nom)"
    },
    {
        "id": "class_method",
        "title": "üìò Ajouter une m√©thode",
        "instruction": "Une m√©thode est une fonction d√©finie dans une classe. Exemple :\n\nclass Person:\n    def saluer(self):\n        print('Salut')",
        "initial_code": "class Person:\n    def saluer(self):\n        print('Salut')\n\np = Person()\np.saluer()",
        "expected_output": "Salut",
        "level": 2,
        "theme": "classes",
        "hint": "Lis bien l'exemple et observe la d√©finition d'une m√©thode.",
        "solution_code": "class Person:\n    def saluer(self):\n        print('Salut')\n\np = Person()\np.saluer()"
    },
    {
        "id": "class_method_use",
        "title": "D√©finir une m√©thode",
        "instruction": "Cr√©e une classe `Chat` avec une m√©thode `miauler()` qui affiche 'Miaou !'.",
        "initial_code": "# Classe Chat",
        "expected_output": "Miaou !",
        "level": 3,
        "theme": "classes",
        "hint": "D√©finis une m√©thode dans la classe et appelle-la sur une instance.",
        "solution_code": "class Chat:\n    def miauler(self):\n        print('Miaou !')\n\nc = Chat()\nc.miauler()"
    },
    {
        "id": "class_method_return",
        "title": "M√©thode avec return",
        "instruction": "Ajoute une m√©thode `double_age()` qui retourne deux fois l'√¢ge du chien.",
        "initial_code": "# M√©thode return",
        "expected_output": "10",
        "level": 3,
        "theme": "classes",
        "hint": "La m√©thode doit retourner self.age * 2.",
        "solution_code": "class Chien:\n    def __init__(self, age):\n        self.age = age\n    def double_age(self):\n        return self.age * 2\n\nrex = Chien(5)\nprint(rex.double_age())"
    },
    {
        "id": "class_str_method",
        "title": "üîÅ Bonus : m√©thode __str__",
        "instruction": "Ajoute une m√©thode `__str__()` pour qu'un objet `Livre` affiche 'Titre: Python 101'.",
        "initial_code": "# __str__ ici",
        "expected_output": "Titre: Python 101",
        "level": 4,
        "theme": "classes",
        "hint": "D√©finis __str__ pour retourner la cha√Æne voulue.",
        "solution_code": "class Livre:\n    def __str__(self):\n        return 'Titre: Python 101'\n\nl = Livre()\nprint(l)"
    },
    {
        "id": "class_inheritance",
        "title": "üìò H√©ritage",
        "instruction": "Une classe peut h√©riter d'une autre :\n\nclass VoitureElectrique(Voiture):\n    pass",
        "initial_code": "class Voiture:\n    def klaxon(self):\n        print('Beep')\n\nclass VoitureElectrique(Voiture):\n    pass\n\nv = VoitureElectrique()\nv.klaxon()",
        "expected_output": "Beep",
        "level": 4,
        "theme": "classes",
        "hint": "Lis bien l'exemple et observe la syntaxe de l'h√©ritage.",
        "solution_code": "class Voiture:\n    def klaxon(self):\n        print('Beep')\n\nclass VoitureElectrique(Voiture):\n    pass\n\nv = VoitureElectrique()\nv.klaxon()"
    },
    {
        "id": "class_inheritance_add",
        "title": "üîÅ Bonus : H√©ritage + nouvelle m√©thode",
        "instruction": "Fais h√©riter `ChatRobot` de `Chat`, et ajoute une m√©thode `bip()` qui affiche 'Bip bip'.",
        "initial_code": "# Inh√©rence + m√©thode",
        "expected_output": "Bip bip",
        "level": 5,
        "theme": "classes",
        "hint": "D√©finis ChatRobot(Chat) et ajoute la m√©thode bip().",
        "solution_code": "class Chat:\n    pass\n\nclass ChatRobot(Chat):\n    def bip(self):\n        print('Bip bip')\n\ncr = ChatRobot()\ncr.bip()"
    }
]
